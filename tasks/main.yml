---

- become: True
  block:

  - name: Make sure the password is set
    assert:
      that:
        - "nfsridef_addr != ''"
        - "nfsridef_ansible_password != ''"

  - name: Do the base install
    shell: >
        yum groups -y install '{{ item.groupname|default(nfsridef_groupname) }}' 
        --releasever={{ item.releasever|default(nfsridef_releasever) }} 
        --installroot={{ item.path }}
    args:
      creates: "{{ item.path }}"
    loop: "{{ nfsroot_image_list }}"

  - name: Write the rwtab
    copy:
      dest: "{{ item.path }}/etc/rwtab"
      content: |
        files /etc
        files /home/ansible
        files /var
        empty /tmp
    loop: "{{ nfsroot_image_list }}"

  - name: Make sure that /etc/resolv.conf exists
    copy:
      dest: "{{ item.path }}/etc/resolv.conf"
      content: ""
    loop: "{{ nfsroot_image_list }}"

  - name: Make sure that /etc/aliases.db exists
    copy:
      dest: "{{ item.path }}/etc/aliases.db"
      content: ""
    loop: "{{ nfsroot_image_list }}"

  - name: Write the fstab
    blockinfile:
      create: True
      path: "{{ item.path }}/etc/fstab"
      block: |
        {{ item.addr|default(nfsridef_addr) }}:{{ item.path }} / nfs 
          {%- if item.readonly|default(nfsridef_readonly) %} ro{% else %} rw{% endif %} 0 0
        
        none        /tmp        tmpfs   defaults   0 0
        tmpfs       /dev/shm    tmpfs   defaults   0 0
        sysfs       /sys        sysfs   defaults   0 0
        proc        /proc       proc    defaults   0 0
    loop: "{{ nfsroot_image_list }}"

  - name: Write the readonly-root file
    copy:
      dest: "{{ item.path }}/etc/sysconfig/readonly-root"
      content: |
        READONLY={% if item.readonly|default(nfsridef_readonly) %}yes{% else %}no{% endif %}
        
        TEMPORARY_STATE=yes
        RW_MOUNT=/stateless/writable
        RW_OPTIONS=
        STATE_LABEL=stateless-state
        STATE_MOUNT=/stateless/state
        STATE_OPTIONS=
        CLIENTSTATE=
        SLAVE_MOUNTS=yes
    loop: "{{ nfsroot_image_list }}"

  - name: Make a list of SSH key types
    set_fact:
      key_type_str: |
        {% for item in nfsroot_image_list %}
        {% if 'sshkey_types' in item %}
        {% for kt in item.sshkey_types %}
        - { path: '{{ item.path }}', keytype: '{{ kt }}' }
        {% endfor %}
        {% else %}
        {% for kt in nfsridef_sshkey_types %}
        - { path: '{{ item.path }}', keytype: '{{ kt }}' }
        {% endfor %}
        {% endif %}
        {% endfor %}
    check_mode: no

  - name: Generate SSH host keys
    shell: >
        ssh-keygen -q -C "" -N "" -t {{ item.keytype }} 
        -f {{ item.path }}/etc/ssh/ssh_host_{{ item.keytype }}_key
    args:
      creates: "{{ item.path }}/etc/ssh/ssh_host_{{ item.keytype }}_key"
    with_items: "{{ key_type_str|from_yaml }}"

  - name: Make Selinux Permissive
    copy:
      dest: "{{ item.path }}/etc/selinux/config"
      content: |
        SELINUX=permissive
        SELINUXTYPE=targeted
    loop: "{{ nfsroot_image_list }}"

  - name: Add the ansible user
    shell: > 
        chroot {{ item.path }} useradd --create-home --no-user-group --shell /bin/bash 
        --gid wheel --password '{{ item.ansible_password|default(nfsridef_ansible_password) }}'
        --uid {{ item.ansible_uid|default(nfsridef_ansible_uid) }} ansible
    args:
      creates: "{{ item.path }}/home/ansible"
    loop: "{{ nfsroot_image_list }}"

  - name: Install ansible's SSH Key
    authorized_key:
      user: ansible
      path: "{{ item.path }}/home/ansible/.ssh/authorized_keys"
      key: "{{ item.ansible_pubkey|default(nfsridef_ansible_pubkey) }}"
    loop: "{{ nfsroot_image_list }}"

  - name: Give ansible password-less sudo
    copy:
      dest: "{{ item.path }}/etc/sudoers.d/ansible"
      content: |
        Defaults:ansible !requiretty

        ansible ALL=(ALL:ALL) NOPASSWD:ALL
    loop: "{{ nfsroot_image_list }}"


